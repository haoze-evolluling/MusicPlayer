/**
 * SimpleParticles - 一个简化的粒子动画库，替代particles.js
 */

// 定义全局变量
let simpleParticles = {
    canvas: null,
    ctx: null,
    particles: [],
    animationFrame: null,
    options: {}
};

// 初始化粒子系统
function particlesJS(containerId, options) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error('找不到容器元素:', containerId);
        return;
    }
    
    // 清理先前的实例
    if (simpleParticles.animationFrame) {
        cancelAnimationFrame(simpleParticles.animationFrame);
        simpleParticles.particles = [];
    }
    
    // 设置默认选项
    simpleParticles.options = Object.assign({
        particles: {
            number: {
                value: 80
            },
            color: {
                value: "#ffffff"
            },
            size: {
                value: 3,
                random: true
            },
            line_linked: {
                enable: true,
                distance: 150,
                color: "#ffffff",
                opacity: 0.4
            },
            move: {
                speed: 2
            }
        }
    }, options || {});
    
    // 创建画布
    createCanvas(container);
    
    // 创建粒子
    createParticles();
    
    // 开始动画
    animate();
    
    // 监听窗口大小变化
    window.addEventListener('resize', resizeCanvas);
}

// 创建画布
function createCanvas(container) {
    // 移除旧的画布
    if (simpleParticles.canvas) {
        container.removeChild(simpleParticles.canvas);
    }
    
    // 创建新画布
    const canvas = document.createElement('canvas');
    canvas.style.position = 'absolute';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.pointerEvents = 'none';
    container.appendChild(canvas);
    
    // 设置画布大小
    canvas.width = container.offsetWidth;
    canvas.height = container.offsetHeight;
    
    simpleParticles.canvas = canvas;
    simpleParticles.ctx = canvas.getContext('2d');
}

// 调整画布大小
function resizeCanvas() {
    if (!simpleParticles.canvas) return;
    
    const container = simpleParticles.canvas.parentElement;
    simpleParticles.canvas.width = container.offsetWidth;
    simpleParticles.canvas.height = container.offsetHeight;
}

// 创建粒子
function createParticles() {
    const options = simpleParticles.options;
    const count = options.particles.number.value;
    const canvas = simpleParticles.canvas;
    const particleSize = options.particles.size.value;
    
    simpleParticles.particles = [];
    
    for (let i = 0; i < count; i++) {
        const size = options.particles.size.random ? Math.random() * particleSize : particleSize;
        
        simpleParticles.particles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            size: size,
            color: options.particles.color.value,
            speedX: (Math.random() - 0.5) * options.particles.move.speed,
            speedY: (Math.random() - 0.5) * options.particles.move.speed
        });
    }
}

// 绘制粒子
function drawParticles() {
    const ctx = simpleParticles.ctx;
    const canvas = simpleParticles.canvas;
    const options = simpleParticles.options;
    
    // 清除画布
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // 更新和绘制粒子
    simpleParticles.particles.forEach((p, i) => {
        // 移动粒子
        p.x += p.speedX;
        p.y += p.speedY;
        
        // 边界检测
        if (p.x < 0) p.x = canvas.width;
        if (p.x > canvas.width) p.x = 0;
        if (p.y < 0) p.y = canvas.height;
        if (p.y > canvas.height) p.y = 0;
        
        // 绘制粒子
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
        ctx.fillStyle = p.color;
        ctx.fill();
        
        // 绘制连线
        if (options.particles.line_linked.enable) {
            const lineDistance = options.particles.line_linked.distance;
            const lineColor = options.particles.line_linked.color;
            const lineOpacity = options.particles.line_linked.opacity;
            
            for (let j = i + 1; j < simpleParticles.particles.length; j++) {
                const p2 = simpleParticles.particles[j];
                const dx = p.x - p2.x;
                const dy = p.y - p2.y;
                const dist = Math.sqrt(dx * dx + dy * dy);
                
                if (dist < lineDistance) {
                    const opacity = lineOpacity - (dist / lineDistance) * lineOpacity;
                    ctx.beginPath();
                    ctx.moveTo(p.x, p.y);
                    ctx.lineTo(p2.x, p2.y);
                    ctx.strokeStyle = `rgba(${hexToRgb(lineColor)}, ${opacity})`;
                    ctx.stroke();
                }
            }
        }
    });
}

// 动画循环
function animate() {
    drawParticles();
    simpleParticles.animationFrame = requestAnimationFrame(animate);
}

// 辅助函数：将十六进制颜色转换为 RGB
function hexToRgb(hex) {
    hex = hex.replace(/^#/, '');
    
    if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }
    
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    
    return `${r}, ${g}, ${b}`;
}

// 导出全局变量
window.particlesJS = particlesJS; 